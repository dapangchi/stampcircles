<!DOCTYPE html>
<!-- saved from url=(0083)http://closure-library.googlecode.com/svn/trunk/closure/goog/debug/logger_test.html -->
<HTML><!--
  Copyright 2006 Google Inc. All Rights Reserved.
--><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Closure Unit Tests - goog.debug.Logger</TITLE>
<SCRIPT src="./Closure Unit Tests - goog.debug.Logger_files/base.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/deps.js"></SCRIPT>
<SCRIPT>
  goog.require('goog.debug.Logger');
  goog.require('goog.testing.jsunit');
</SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/array.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/string.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/object.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/structs.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/iter.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/map.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/set.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/debug.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/logrecord.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/logger.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/stacktrace.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/asserts.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/testcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/testrunner.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.Logger_files/jsunit.js"></SCRIPT>
</HEAD><BODY>
<SCRIPT>

function getDebug(sb, logger, level) {
  var spacer = '';
  if (level) {
    spacer = (new Array(level + 1)).join(' ');
  }
  sb[sb.length] = spacer;
  var name = logger.getName();
  if (name) {
    sb[sb.length] = name;
  } else {
    sb[sb.length] = 'ROOT';
  }
  sb[sb.length] = '\n';
  var children = logger.getChildren();
  for (var key in children) {
    getDebug(sb, children[key], level + 1);
  }
};


function testParents() {
  var l1 = goog.debug.Logger.getLogger('goog.test');
  var l2 = goog.debug.Logger.getLogger('goog.bar');
  var l3 = goog.debug.Logger.getLogger('goog.bar.foo');
  var l4 = goog.debug.Logger.getLogger('goog.bar.baaz');
  var rootLogger = goog.debug.LogManager.getRoot();
  var googLogger = goog.debug.Logger.getLogger('goog');
  assertEquals(rootLogger, googLogger.getParent());
  assertEquals(googLogger, l1.getParent());
  assertEquals(googLogger, l2.getParent());
  assertEquals(l2, l3.getParent());
  assertEquals(l2, l4.getParent());
}

function testLogging() {
  var root = goog.debug.LogManager.getRoot();
  var handler = new TestHandler();
  var f = goog.bind(handler.onPublish, handler);
  root.addHandler(f);
  var l4 = goog.debug.Logger.getLogger('goog.bar.baaz');
  l4.log(goog.debug.Logger.Level.WARNING, 'foo');
  assertNotNull(handler.logRecord);
  assertEquals(goog.debug.Logger.Level.WARNING, handler.logRecord.getLevel());
  assertEquals('foo', handler.logRecord.getMessage());
  handler.logRecord = null;
  root.removeHandler(f);
  l4.log(goog.debug.Logger.Level.WARNING, 'foo');
  assertNull(handler.logRecord);
}

function testFiltering() {
  var root = goog.debug.LogManager.getRoot();
  var handler = new TestHandler();
  var f = goog.bind(handler.onPublish, handler);
  root.addHandler(f);
  var l3 = goog.debug.Logger.getLogger('goog.bar.foo');
  l3.setLevel(goog.debug.Logger.Level.WARNING);
  var l4 = goog.debug.Logger.getLogger('goog.bar.baaz');
  l4.setLevel(goog.debug.Logger.Level.INFO);
  l4.log(goog.debug.Logger.Level.WARNING, 'foo');
  assertNotNull(handler.logRecord);
  assertEquals(goog.debug.Logger.Level.WARNING, handler.logRecord.getLevel());
  assertEquals('foo', handler.logRecord.getMessage());
  handler.reset();
  l3.log(goog.debug.Logger.Level.INFO, 'bar');
  assertNull(handler.logRecord);
  l3.log(goog.debug.Logger.Level.WARNING, 'baaz');
  assertNotNull(handler.logRecord);
  handler.reset();
  l3.log(goog.debug.Logger.Level.SEVERE, 'baaz');
  assertNotNull(handler.logRecord);
};

function testException() {
  var root = goog.debug.LogManager.getRoot();
  var handler = new TestHandler();
  var f = goog.bind(handler.onPublish, handler);
  root.addHandler(f);
  var logger = goog.debug.Logger.getLogger('goog.debug.logger_test');
  var ex = Error('boo!');
  logger.severe('hello', ex);
  assertNotNull(handler.logRecord);
  assertEquals(goog.debug.Logger.Level.SEVERE, handler.logRecord.getLevel());
  assertEquals('hello', handler.logRecord.getMessage());
  assertEquals(ex, handler.logRecord.getException());
  assertEquals('Message: boo!',
      handler.logRecord.getExceptionText().substring(0, 13));
}

function testGetPredefinedLevel() {
  assertEquals(goog.debug.Logger.Level.OFF,
      goog.debug.Logger.Level.getPredefinedLevel('OFF'));
  assertEquals(goog.debug.Logger.Level.SHOUT,
      goog.debug.Logger.Level.getPredefinedLevel('SHOUT'));
  assertEquals(goog.debug.Logger.Level.SEVERE,
      goog.debug.Logger.Level.getPredefinedLevel('SEVERE'));
  assertEquals(goog.debug.Logger.Level.WARNING,
      goog.debug.Logger.Level.getPredefinedLevel('WARNING'));
  assertEquals(goog.debug.Logger.Level.INFO,
      goog.debug.Logger.Level.getPredefinedLevel('INFO'));
  assertEquals(goog.debug.Logger.Level.CONFIG,
      goog.debug.Logger.Level.getPredefinedLevel('CONFIG'));
  assertEquals(goog.debug.Logger.Level.FINE,
      goog.debug.Logger.Level.getPredefinedLevel('FINE'));
  assertEquals(goog.debug.Logger.Level.FINER,
      goog.debug.Logger.Level.getPredefinedLevel('FINER'));
  assertEquals(goog.debug.Logger.Level.FINEST,
      goog.debug.Logger.Level.getPredefinedLevel('FINEST'));
  assertEquals(goog.debug.Logger.Level.ALL,
      goog.debug.Logger.Level.getPredefinedLevel('ALL'));
}

function testGetPredefinedLevelByValue() {
  assertEquals(goog.debug.Logger.Level.OFF,
      goog.debug.Logger.Level.getPredefinedLevelByValue(Infinity));
  assertEquals(goog.debug.Logger.Level.SHOUT,
      goog.debug.Logger.Level.getPredefinedLevelByValue(1300));
  assertEquals(goog.debug.Logger.Level.SHOUT,
      goog.debug.Logger.Level.getPredefinedLevelByValue(1200));
  assertEquals(goog.debug.Logger.Level.SEVERE,
      goog.debug.Logger.Level.getPredefinedLevelByValue(1150));
  assertEquals(goog.debug.Logger.Level.SEVERE,
      goog.debug.Logger.Level.getPredefinedLevelByValue(1000));
  assertEquals(goog.debug.Logger.Level.WARNING,
      goog.debug.Logger.Level.getPredefinedLevelByValue(900));
  assertEquals(goog.debug.Logger.Level.INFO,
      goog.debug.Logger.Level.getPredefinedLevelByValue(800));
  assertEquals(goog.debug.Logger.Level.CONFIG,
      goog.debug.Logger.Level.getPredefinedLevelByValue(701));
  assertEquals(goog.debug.Logger.Level.CONFIG,
      goog.debug.Logger.Level.getPredefinedLevelByValue(700));
  assertEquals(goog.debug.Logger.Level.FINE,
      goog.debug.Logger.Level.getPredefinedLevelByValue(500));
  assertEquals(goog.debug.Logger.Level.FINER,
      goog.debug.Logger.Level.getPredefinedLevelByValue(400));
  assertEquals(goog.debug.Logger.Level.FINEST,
      goog.debug.Logger.Level.getPredefinedLevelByValue(300));
  assertEquals(goog.debug.Logger.Level.ALL,
      goog.debug.Logger.Level.getPredefinedLevelByValue(0));
  assertNull(goog.debug.Logger.Level.getPredefinedLevelByValue(-1));
}

function TestHandler() {
  this.logRecord = null;
}

TestHandler.prototype.onPublish = function(logRecord) {
  this.logRecord = logRecord;
};


TestHandler.prototype.reset = function() {
  this.logRecord = null;
}

function testGetLogRecord() {
  var name = 'test.get.log.record';
  var level = 1;
  var msg = 'msg';

  var logger = goog.debug.Logger.getLogger(name);
  var logRecord = logger.getLogRecord(level, msg)

  assertEquals(name, logRecord.getLoggerName());
  assertEquals(level, logRecord.getLevel());
  assertEquals(msg, logRecord.getMessage());

  assertNull(logRecord.getException());
}

function testGetLogRecordWithException() {
  var name = 'test.get.log.record';
  var level = 1;
  var msg = 'msg';
  var ex = Error('Hi');

  var logger = goog.debug.Logger.getLogger(name);
  var logRecord = logger.getLogRecord(level, msg, ex)

  assertEquals(name, logRecord.getLoggerName());
  assertEquals(level, logRecord.getLevel());
  assertEquals(msg, logRecord.getMessage());
  assertEquals(ex, logRecord.getException());
}

</SCRIPT>


<DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">Closure Unit Tests - goog.debug.Logger [PASSED]</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">closure-library.googlecode.com/svn/trunk/closure/goog/debug/logger_test.html</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">8 of 8 tests run in 30ms.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">8 passed, 0 failed.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">4 ms/test. 17 files loaded.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.233  Start</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.246  testException : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.248  testFiltering : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.248  testGetLogRecord : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.254  testGetLogRecordWithException : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.256  testGetPredefinedLevel : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.259  testGetPredefinedLevelByValue : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.261  testLogging : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.263  testParents : PASSED</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:36.263  Done</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; "> </DIV><A style="display: block; font-size: small; " href="">Run again without reloading</A></DIV></BODY></HTML>