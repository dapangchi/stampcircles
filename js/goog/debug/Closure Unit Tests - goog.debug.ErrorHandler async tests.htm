<!DOCTYPE html>
<!-- saved from url=(0095)http://closure-library.googlecode.com/svn/trunk/closure/goog/debug/errorhandler_async_test.html -->
<HTML><!--
  Copyright 2008 Google Inc. All Rights Reserved.

--><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Closure Unit Tests - goog.debug.ErrorHandler async tests</TITLE>
<!-- These paths should be relative to the test -->
<SCRIPT src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/base.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/deps.js"></SCRIPT>
<SCRIPT>
  goog.require('goog.testing.jsunit');
  goog.require('goog.testing.AsyncTestCase');
  goog.require('goog.debug.ErrorHandler');
  goog.require('goog.userAgent');
</SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/stacktrace.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/asserts.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/testcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/testrunner.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/jsunit.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/asynctestcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/array.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/string.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/object.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/structs.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/iter.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/map.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/set.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/debug.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/logrecord.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/logger.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/disposable.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/simplepool.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/tracer.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/errorhandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.debug.ErrorHandler async tests_files/useragent.js"></SCRIPT>
</HEAD><BODY>
<SCRIPT>

  var testCase = new goog.testing.AsyncTestCase(document.title);

  testCase.setUpPage = function() {
    this.waitForAsync('setUpPage');
    this.stepTimeout = 5 * 1000;

    this.oldTimeout = window.setTimeout;
    this.oldInterval = window.setInterval;
    this.handler = new goog.debug.ErrorHandler(
        goog.bind(this.onException, this));
    this.handler.protectWindowSetTimeout();
    this.handler.protectWindowSetInterval();
    this.exceptions = [];
    this.errors = 0;

    // Override the error event handler, since we are purposely throwing
    // exceptions from global functions, and expect them
    this.oldWindowOnError = window.onerror;
    window.onerror = goog.bind(this.onError, this);

    this.add(new goog.testing.TestCase.Test(
        'test results', this.testResults, this));
    this.timeoutId = window.setTimeout(goog.bind(this.timeOut, this), 10);
    this.intervalId = window.setInterval(goog.bind(this.interval, this), 20);
  };

  testCase.tearDownPage = function() {
    window.setTimeout = this.oldTimeout;
    window.setInterval = this.oldInterval;
  };

  testCase.onException = function(e) {
    this.exceptions.push(e);
    if (this.timeoutHit && this.intervalHit) {
      this.continueTesting();
    }
  };

  testCase.onError = function(msg, url, line) {
    this.errors++;
    return true;
  };

  testCase.timeOut = function() {
    this.timeoutHit = true;
    throw arguments.callee;
  };

  testCase.interval = function() {
    this.intervalHit = true;
    window.clearTimeout(this.intervalId);
    throw arguments.callee;
  };

  testCase.testResults = function() {
    var timeoutHit, intervalHit;

    for (var i = 0; i < this.exceptions.length; ++i) {
      switch (this.exceptions[i]) {
        case this.timeOut: timeoutHit = true; break;
        case this.interval: intervalHit = true; break;
      }
    }

    assertTrue('timeout exception not received', timeoutHit);
    assertTrue('interval exception not received', intervalHit);
    assertTrue('timeout not called', this.timeoutHit);
    assertTrue('interval not called', this.intervalHit);

    if (!goog.userAgent.WEBKIT) {
      assertEquals('2 exceptions should have been caught and rethrown',
          2, this.errors)
    }
  };

  function setUpPage() {
    testCase.runTests();
  }

  // Standalone Closure Test Runner.
  if (typeof G_testRunner != 'undefined') {
    G_testRunner.initialize(testCase);
  }

</SCRIPT><DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">Closure Unit Tests - goog.debug.ErrorHandler async tests [PASSED]</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">closure-library.googlecode.com/svn/trunk/closure/goog/debug/errorhandler_async_test.html</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">1 of 1 tests run in 3ms.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">1 passed, 0 failed.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">3 ms/test. 23 files loaded.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:25.109  Start</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:25.111  test results : PASSED</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">04:20:25.112  Done</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; "> </DIV><A style="display: block; font-size: small; " href="">Run again without reloading</A></DIV>


</BODY></HTML>