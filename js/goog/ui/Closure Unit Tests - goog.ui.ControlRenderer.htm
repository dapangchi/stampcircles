<!DOCTYPE html>
<!-- saved from url=(0089)http://closure-library.googlecode.com/svn/trunk/closure/goog/ui/controlrenderer_test.html -->
<HTML><!--
Copyright 2008 Google Inc. All Rights Reserved.

--><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <TITLE>Closure Unit Tests - goog.ui.ControlRenderer</TITLE>
  <SCRIPT src="./Closure Unit Tests - goog.ui.ControlRenderer_files/base.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/deps.js"></SCRIPT>
  <SCRIPT>
    goog.require('goog.dom.NodeType');
    goog.require('goog.dom.a11y');
    goog.require('goog.dom.a11y.Role');
    goog.require('goog.dom.a11y.State');
    goog.require('goog.dom.classes');
    goog.require('goog.style');
    goog.require('goog.testing.ExpectedFailures');
    goog.require('goog.testing.jsunit');
    goog.require('goog.ui.Component.State');
    goog.require('goog.ui.Control');
    goog.require('goog.ui.ControlRenderer');
    goog.require('goog.userAgent');
  </SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/array.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/tagname.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/classes.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/coordinate.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/size.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/object.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/string.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/useragent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/dom.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/a11y.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/box.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/rect.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/product.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/style.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/relativetimeprovider.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/formatter.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/structs.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/iter.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/map.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/set.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/debug.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/logrecord.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/logger.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/divconsole.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/errorhandlerweakdep.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/disposable.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/event.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/browserevent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/eventwrapper.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/listener.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/simplepool.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/jscript.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/pools.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/events.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/stacktrace.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/asserts.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/testcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/expectedfailures.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/testrunner.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/jsunit.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/eventhandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/eventtarget.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/idgenerator.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/component.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/keycodes.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/keyhandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/controlcontent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/controlrenderer.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/registry.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/decorate.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.ui.ControlRenderer_files/control.js"></SCRIPT>
<STYLE>.dbg-sev{color:#F00}.dbg-w{color:#C40}.dbg-sh{font-weight:bold;color:#000}.dbg-i{color:#444}.dbg-f{color:#999}.dbg-ev{color:#0A0}.dbg-m{color:#990}.logmsg{border-bottom:1px solid #CCC;padding:2px}.logsep{background-color: #8C8;}.logdiv{border:1px solid #CCC;background-color:#FCFCFC;font:medium monospace}</STYLE></HEAD><BODY>
  <DIV id="sandbox"></DIV>
  <SCRIPT>
    var control, controlRenderer, testRenderer;
    var sandbox = goog.dom.$('sandbox');
    var expectedFailures = new goog.testing.ExpectedFailures();

    /**
     * A subclass of ControlRenderer that overrides {@code getAriaRole} and
     * {@code getStructuralCssClass} for testing purposes.
     * @constructor
     * @extends {goog.ui.ControlRenderer}
     */
    function TestRenderer() {
      goog.ui.ControlRenderer.call(this);
    };
    goog.inherits(TestRenderer, goog.ui.ControlRenderer);
    goog.addSingletonGetter(TestRenderer);

    TestRenderer.CSS_CLASS = 'goog-button';

    TestRenderer.IE6_CLASS_COMBINATIONS = [
      ['combined', 'goog-base-hover', 'goog-button'],
      ['combined', 'goog-base-disabled', 'goog-button'],
      ['combined', 'combined2', 'goog-base-hover', 'goog-base-rtl',
       'goog-button']
    ];

    /** {@inheritDoc} */
    TestRenderer.prototype.getAriaRole = function() {
      return goog.dom.a11y.Role.BUTTON;
    };

    /** {@inheritDoc} */
    TestRenderer.prototype.getCssClass = function() {
      return TestRenderer.CSS_CLASS;
    };

    /** {@inheritDoc} */
    TestRenderer.prototype.getStructuralCssClass = function() {
      return 'goog-base';
    };

    /** {@inheritDoc} */
    TestRenderer.prototype.getIe6ClassCombinations = function() {
      return TestRenderer.IE6_CLASS_COMBINATIONS;
    };

    /**
     * @return {boolean} Whether we're on Mac Safari 3.x.
     */
    function isMacSafari3() {
      return goog.userAgent.WEBKIT && goog.userAgent.MAC &&
          !goog.userAgent.isVersion('527');
    }

    /**
     * @return {boolean} Whether we're on IE6 or lower.
     */
    function isIe6() {
      return goog.userAgent.IE && !goog.userAgent.isVersion('7');
    }

    function setUp() {
      control = new goog.ui.Control('Hello');
      controlRenderer = goog.ui.ControlRenderer.getInstance();
      testRenderer = TestRenderer.getInstance();
    }

    function tearDown() {
      control.dispose();
      expectedFailures.handleTearDown();
      control = null;
      controlRenderer = null;
      testRenderer = null;
      goog.dom.removeChildren(sandbox);
    }

    function testConstructor() {
      assertNotNull('ControlRenderer singleton instance must not be null',
          controlRenderer);
      assertNotNull('TestRenderer singleton instance must not be null',
          testRenderer);
    }

    function testGetCustomRenderer() {
      var cssClass = 'special-css-class';
      var renderer = goog.ui.ControlRenderer.getCustomRenderer(
          goog.ui.ControlRenderer, cssClass);
      assertEquals(
          'Renderer should have returned the custom CSS class.',
          cssClass,
          renderer.getCssClass());
    }

    function testGetAriaRole() {
      assertUndefined('ControlRenderer\'s ARIA role must be undefined',
          controlRenderer.getAriaRole());
      assertEquals('TestRenderer\'s ARIA role must have expected value',
          goog.dom.a11y.Role.BUTTON, testRenderer.getAriaRole());
    }

    function testCreateDom() {
      assertHTMLEquals('ControlRenderer must create correct DOM',
          '<div class="goog-control">Hello</div>',
          goog.dom.getOuterHtml(controlRenderer.createDom(control)));
      assertHTMLEquals('TestRenderer must create correct DOM',
          '<div class="goog-button goog-base">Hello</div>',
          goog.dom.getOuterHtml(testRenderer.createDom(control)));
    }

    function testGetContentElement() {
      assertEquals('getContentElement() must return its argument', sandbox,
          controlRenderer.getContentElement(sandbox));
    }

    function testEnableExtraClassName() {
      // enableExtraClassName() must be a no-op if control has no DOM.
      controlRenderer.enableExtraClassName(control, 'foo', true);

      control.createDom();
      var element = control.getElement();

      controlRenderer.enableExtraClassName(control, 'foo', true);
      assertSameElements('Extra class name must have been added',
          ['goog-control', 'foo'], goog.dom.classes.get(element));

      controlRenderer.enableExtraClassName(control, 'foo', true);
      assertSameElements('Enabling existing extra class name must be a no-op',
          ['goog-control', 'foo'], goog.dom.classes.get(element));

      controlRenderer.enableExtraClassName(control, 'bar', false);
      assertSameElements('Disabling nonexistent class name must be a no-op',
          ['goog-control', 'foo'], goog.dom.classes.get(element));

      controlRenderer.enableExtraClassName(control, 'foo', false);
      assertSameElements('Extra class name must have been removed',
          ['goog-control'], goog.dom.classes.get(element));
    }

    function testCanDecorate() {
      assertTrue('canDecorate() must return true',
          controlRenderer.canDecorate());
    }

    function testDecorate() {
      sandbox.innerHTML = '<div id="foo">Hello, world!</div>';
      var foo = goog.dom.$('foo');
      var element = controlRenderer.decorate(control, foo);

      assertEquals('decorate() must return its argument', foo, element);
      assertEquals('Decorated control\'s ID must be set', 'foo',
          control.getId());
      assertTrue('Decorated control\'s content must be a text node',
          control.getContent().nodeType == goog.dom.NodeType.TEXT);
      assertEquals('Decorated control\'s content must have expected value',
          'Hello, world!', control.getContent().nodeValue);
      assertEquals('Decorated control\'s state must be as expected', 0x00,
          control.getState());
      assertSameElements('Decorated element\'s classes must be as expected',
          ['goog-control'], goog.dom.classes.get(element));
    }

    function testDecorateComplexDom() {
      sandbox.innerHTML = '<div id="foo"><i>Hello</i>,<b>world</b>!</div>';
      var foo = goog.dom.$('foo');
      var element = controlRenderer.decorate(control, foo);

      assertEquals('decorate() must return its argument', foo, element);
      assertEquals('Decorated control\'s ID must be set', 'foo',
          control.getId());
      assertTrue('Decorated control\'s content must be an array',
          goog.isArray(control.getContent()));
      assertEquals('Decorated control\'s content must have expected length', 4,
          control.getContent().length);
      assertEquals('Decorated control\'s state must be as expected', 0x00,
          control.getState());
      assertSameElements('Decorated element\'s classes must be as expected',
          ['goog-control'], goog.dom.classes.get(element));
    }

    function testDecorateWithClasses() {
      sandbox.innerHTML =
          '<div id="foo" class="app goog-base-disabled goog-base-hover"></div>';
      var foo = goog.dom.$('foo');

      control.addClassName('extra');
      var element = testRenderer.decorate(control, foo);

      assertEquals('decorate() must return its argument', foo, element);
      assertEquals('Decorated control\'s ID must be set', 'foo',
          control.getId());
      assertNull('Decorated control\'s content must be null',
          control.getContent());
      assertEquals('Decorated control\'s state must be as expected',
          goog.ui.Component.State.DISABLED | goog.ui.Component.State.HOVER,
          control.getState());
      assertSameElements('Decorated element\'s classes must be as expected', [
        'app',
        'extra',
        'goog-base',
        'goog-base-disabled',
        'goog-base-hover',
        'goog-button'
      ], goog.dom.classes.get(element));
    }

    function testDecorateOptimization() {
      // Temporarily replace goog.dom.classes.set().
      var goog$dom$classes$set = goog.dom.classes.set;
      goog.dom.classes.set = function() {
        fail('goog.dom.classes.set() must not be called');
      };

      // Since foo has all required classes, goog.dom.classes.set() must not be
      // called at all.
      sandbox.innerHTML = '<div id="foo" class="goog-control">Foo</div>';
      controlRenderer.decorate(control, goog.dom.$('foo'));

      // Since bar has all required classes, goog.dom.classes.set() must not be
      // called at all.
      sandbox.innerHTML = '<div id="bar" class="goog-base goog-button">Bar' +
          '</div>';
      testRenderer.decorate(control, goog.dom.$('bar'));

      // Since baz has all required classes, goog.dom.classes.set() must not be
      // called at all.
      sandbox.innerHTML = '<div id="baz" class="goog-base goog-button ' +
          'goog-button-disabled">Baz</div>';
      testRenderer.decorate(control, goog.dom.$('baz'));

      // Restore goog.dom.classes.set().
      goog.dom.classes.set = goog$dom$classes$set;
    }

    function testInitializeDom() {
      var renderer = new goog.ui.ControlRenderer();

      // Replace setRightToLeft().
      renderer.setRightToLeft = function() {
        fail('setRightToLeft() must not be called');
      };

      // When a control with default render direction enters the document,
      // setRightToLeft() must not be called.
      control.setRenderer(renderer);
      control.render(sandbox);

      // When a control in the default state (enabled, visible, focusable)
      // enters the document, it must get a tab index.
      // Expected to fail on Mac Safari 3, because it doesn't support tab index.
      expectedFailures.expectFailureFor(isMacSafari3());
      try {
        assertTrue('Enabled, visible, focusable control must have tab index',
            goog.dom.isFocusableTabIndex(control.getElement()));
      } catch (e) {
        expectedFailures.handleException(e);
      }
    }

    function testInitializeDomDecorated() {
      var renderer = new goog.ui.ControlRenderer();

      // Replace setRightToLeft().
      renderer.setRightToLeft = function() {
        fail('setRightToLeft() must not be called');
      };

      sandbox.innerHTML = '<div id="foo" class="goog-control">Foo</div>';

      // When a control with default render direction enters the document,
      // setRightToLeft() must not be called.
      control.setRenderer(renderer);
      control.decorate(goog.dom.$('foo'));

      // When a control in the default state (enabled, visible, focusable)
      // enters the document, it must get a tab index.
      // Expected to fail on Mac Safari 3, because it doesn't support tab index.
      expectedFailures.expectFailureFor(isMacSafari3());
      try {
        assertTrue('Enabled, visible, focusable control must have tab index',
            goog.dom.isFocusableTabIndex(control.getElement()));
      } catch (e) {
        expectedFailures.handleException(e);
      }
    }

    function testInitializeDomDisabledBiDi() {
      var renderer = new goog.ui.ControlRenderer();

      // Replace setFocusable().
      renderer.setFocusable = function() {
        fail('setFocusable() must not be called');
      };

      // When a disabled control enters the document, setFocusable() must not
      // be called.
      control.setEnabled(false);
      control.setRightToLeft(true);
      control.setRenderer(renderer);
      control.render(sandbox);

      // When a right-to-left control enters the document, special stying must
      // be applied.
      assertSameElements('BiDi control must have right-to-left class',
          ['goog-control', 'goog-control-disabled', 'goog-control-rtl'],
          goog.dom.classes.get(control.getElement()));
    }

    function testInitializeDomDisabledBiDiDecorated() {
      var renderer = new goog.ui.ControlRenderer();

      // Replace setFocusable().
      renderer.setFocusable = function() {
        fail('setFocusable() must not be called');
      };

      sandbox.innerHTML =
          '<div dir="rtl">\n' +
          '  <div id="foo" class="goog-control-disabled">Foo</div>\n' +
          '</div>\n';

      // When a disabled control enters the document, setFocusable() must not
      // be called.
      control.setRenderer(renderer);
      control.decorate(goog.dom.$('foo'));

      // When a right-to-left control enters the document, special stying must
      // be applied.
      assertSameElements('BiDi control must have right-to-left class',
          ['goog-control', 'goog-control-disabled', 'goog-control-rtl'],
          goog.dom.classes.get(control.getElement()));
    }

    function testSetAriaRole() {
      sandbox.innerHTML = '<div id="foo">Foo</div><div id="bar">Bar</div>';

      var foo = goog.dom.$('foo');
      controlRenderer.setAriaRole(foo);
      assertEquals('ControlRenderer must not set ARIA role', '',
          goog.dom.a11y.getRole(foo));

      var bar = goog.dom.$('bar');
      testRenderer.setAriaRole(bar);
      if (goog.userAgent.GECKO) {
        assertEquals('On Gecko, element must have expected ARIA role',
            goog.dom.a11y.Role.BUTTON, goog.dom.a11y.getRole(bar));
      } else {
        assertEquals('On non-Gecko, element must not have ARIA role', '',
            goog.dom.a11y.getRole(bar));
      }
    }

    function testSetAllowTextSelection() {
      sandbox.innerHTML = '<div id="foo"><span>Foo</span></div>';
      var foo = goog.dom.$('foo');

      controlRenderer.setAllowTextSelection(foo, false);
      assertTrue('Parent element must be unselectable on all browsers',
          goog.style.isUnselectable(foo));
      if (goog.userAgent.IE || goog.userAgent.OPERA) {
        assertTrue('On IE and Opera, child element must also be unselectable',
            goog.style.isUnselectable(foo.firstChild));
      } else {
        assertFalse('On browsers other than IE and Opera, the child element ' +
            'must not be unselectable',
            goog.style.isUnselectable(foo.firstChild));
      }

      controlRenderer.setAllowTextSelection(foo, true);
      assertFalse('Parent element must be selectable',
          goog.style.isUnselectable(foo));
      assertFalse('Child element must be unselectable',
          goog.style.isUnselectable(foo.firstChild));
    }

    function testSetRightToLeft() {
      sandbox.innerHTML = '<div id="foo">Foo</div><div id="bar">Bar</div>';

      var foo = goog.dom.$('foo');
      controlRenderer.setRightToLeft(foo, true);
      assertSameElements('Element must have right-to-left class applied',
          ['goog-control-rtl'], goog.dom.classes.get(foo));
      controlRenderer.setRightToLeft(foo, false);
      assertSameElements('Element must not have right-to-left class applied',
          [], goog.dom.classes.get(foo));

      var bar = goog.dom.$('bar');
      testRenderer.setRightToLeft(bar, true);
      assertSameElements('Element must have right-to-left class applied',
          ['goog-base-rtl'], goog.dom.classes.get(bar));
      testRenderer.setRightToLeft(bar, false);
      assertSameElements('Element must not have right-to-left class applied',
          [], goog.dom.classes.get(bar));
    }

    function testIsFocusable() {
      control.render(sandbox);
      // Expected to fail on Mac Safari 3, because it doesn't support tab index.
      expectedFailures.expectFailureFor(isMacSafari3());
      try {
        assertTrue('Control\'s key event target must be focusable',
            controlRenderer.isFocusable(control));
      } catch (e) {
        expectedFailures.handleException(e);
      }
    }

    function testIsFocusableForNonFocusableControl() {
      control.setSupportedState(goog.ui.Component.State.FOCUSED, false);
      control.render(sandbox);
      assertFalse('Non-focusable control\'s key event target must not be ' +
          'focusable', controlRenderer.isFocusable(control));
    }

    function testIsFocusableForControlWithoutKeyEventTarget() {
      // Unrendered control has no key event target.
      assertNull('Unrendered control must not have key event target',
          control.getKeyEventTarget());
      assertFalse('isFocusable() must return null if no key event target',
          controlRenderer.isFocusable(control));
    }

    function testSetFocusable() {
      control.render(sandbox);
      controlRenderer.setFocusable(control, false);
      assertFalse('Control\'s key event target must not have tab index',
          goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));
      controlRenderer.setFocusable(control, true);
      // Expected to fail on Mac Safari 3, because it doesn't support tab index.
      expectedFailures.expectFailureFor(isMacSafari3());
      try {
        assertTrue('Control\'s key event target must have focusable tab index',
            goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));
      } catch (e) {
        expectedFailures.handleException(e);
      }
    }

    function testSetFocusableForNonFocusableControl() {
      control.setSupportedState(goog.ui.Component.State.FOCUSED, false);
      control.render(sandbox);
      assertFalse('Non-focusable control\'s key event target must not be ' +
          'focusable',
          goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));
      controlRenderer.setFocusable(control, true);
      assertFalse('Non-focusable control\'s key event target must not be ' +
          'focusable, even after calling setFocusable(true)',
          goog.dom.isFocusableTabIndex(control.getKeyEventTarget()));
    }

    function testSetVisible() {
      sandbox.innerHTML = '<div id="foo">Foo</div>';
      var foo = goog.dom.$('foo');
      assertTrue('Element must be visible', foo.style.display != 'none');
      controlRenderer.setVisible(foo, true);
      assertTrue('Element must still be visible', foo.style.display != 'none');
      controlRenderer.setVisible(foo, false);
      assertTrue('Element must be hidden', foo.style.display == 'none');
    }

    function testSetState() {
      control.setRenderer(testRenderer);
      control.createDom();
      var element = control.getElement();

      assertSameElements('Control must have expected class names',
          ['goog-button', 'goog-base'], goog.dom.classes.get(element));
      assertEquals('Control must not have disabled ARIA state', '',
          goog.dom.a11y.getState(element, goog.dom.a11y.State.DISABLED));

      testRenderer.setState(control, goog.ui.Component.State.DISABLED, true);
      assertSameElements('Control must have disabled class name',
          ['goog-button', 'goog-base', 'goog-base-disabled'],
          goog.dom.classes.get(element));
      if (goog.userAgent.GECKO) {
        assertEquals('On Gecko, control must have disabled ARIA state', 'true',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.DISABLED));
      } else {
        assertEquals('On non-Gecko, control must not have ARIA state', '',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.DISABLED));
      }

      testRenderer.setState(control, goog.ui.Component.State.DISABLED, false);
      assertSameElements('Control must no longer have disabled class name',
          ['goog-button', 'goog-base'], goog.dom.classes.get(element));
      if (goog.userAgent.GECKO) {
        assertEquals('On Gecko, control must not have disabled ARIA state',
            'false',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.DISABLED));
      } else {
        assertEquals('On non-Gecko, control must not have ARIA state', '',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.DISABLED));
      }

      testRenderer.setState(control, 0xFFFFFF, true);
      assertSameElements('Class names must be unchanged for invalid state',
          ['goog-button', 'goog-base'], goog.dom.classes.get(element));
    }

    function testUpdateAriaState() {
      control.createDom();
      var element = control.getElement();

      controlRenderer.updateAriaState(element, goog.ui.Component.State.ACTIVE,
          true);
      if (goog.userAgent.GECKO) {
        assertEquals('On Gecko, control must have pressed ARIA state', 'true',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.PRESSED));
      } else {
        assertEquals('On non-Gecko, control must not have ARIA state', '',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.PRESSED));
      }

      controlRenderer.updateAriaState(element, goog.ui.Component.State.ACTIVE,
          false);
      if (goog.userAgent.GECKO) {
        assertEquals('On Gecko, control must no longer have pressed ARIA state',
            'false',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.PRESSED));
      } else {
        assertEquals('On non-Gecko, control must not have ARIA state', '',
            goog.dom.a11y.getState(element, goog.dom.a11y.State.PRESSED));
      }
    }

    function testSetContent() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox, 'Not so fast!');
      assertEquals('Element must contain expected text value', 'Not so fast!',
          goog.dom.getTextContent(sandbox));
    }

    function testSetContentNull() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox, null);
      assertEquals('Element must have no child nodes', 0,
          sandbox.childNodes.length);
      assertEquals('Element must contain expected text value', '',
          goog.dom.getTextContent(sandbox));
    }

    function testSetContentEmpty() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox, '');
      assertEquals('Element must not have children', 0,
          sandbox.childNodes.length);
      assertEquals('Element must contain expected text value', '',
          goog.dom.getTextContent(sandbox));
    }

    function testSetContentWhitespace() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox, ' ');
      assertEquals('Element must have one child', 1,
          sandbox.childNodes.length);
      assertEquals('Child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.firstChild.nodeType);
      assertEquals('Element must contain expected text value', ' ',
          goog.dom.getTextContent(sandbox));
    }

    function testSetContentTextNode() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox, document.createTextNode('Text'));
      assertEquals('Element must have one child', 1,
          sandbox.childNodes.length);
      assertEquals('Child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.firstChild.nodeType);
      assertEquals('Element must contain expected text value', 'Text',
          goog.dom.getTextContent(sandbox));
    }

    function testSetContentElementNode() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox,
          goog.dom.createDom('div', {id: 'foo'}, 'Foo'));
      assertEquals('Element must have one child', 1,
          sandbox.childNodes.length);
      assertEquals('Child must be an element node', goog.dom.NodeType.ELEMENT,
          sandbox.firstChild.nodeType);
      assertHTMLEquals('Element must contain expected HTML',
          '<div id="foo">Foo</div>', sandbox.innerHTML);
    }

    function testSetContentArray() {
      sandbox.innerHTML = 'Hello, world!';
      controlRenderer.setContent(sandbox,
          ['Hello, ', goog.dom.createDom('b', null, 'world'), '!']);
      assertEquals('Element must have three children', 3,
          sandbox.childNodes.length);
      assertEquals('1st child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.childNodes[0].nodeType);
      assertEquals('2nd child must be an element', goog.dom.NodeType.ELEMENT,
          sandbox.childNodes[1].nodeType);
      assertEquals('3rd child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.childNodes[2].nodeType);
      assertHTMLEquals('Element must contain expected HTML',
          'Hello, <b>world</b>!', sandbox.innerHTML);
    }

    function testSetContentNodeList() {
      sandbox.innerHTML = 'Hello, world!';
      var div = goog.dom.createDom('div', null, 'Hello, ',
          goog.dom.createDom('b', null, 'world'), '!');
      controlRenderer.setContent(sandbox, div.childNodes);
      assertEquals('Element must have three children', 3,
          sandbox.childNodes.length);
      assertEquals('1st child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.childNodes[0].nodeType);
      assertEquals('2nd child must be an element', goog.dom.NodeType.ELEMENT,
          sandbox.childNodes[1].nodeType);
      assertEquals('3rd child must be a text node', goog.dom.NodeType.TEXT,
          sandbox.childNodes[2].nodeType);
      assertHTMLEquals('Element must contain expected HTML',
          'Hello, <b>world</b>!', sandbox.innerHTML);
    }

    function testGetKeyEventTarget() {
      assertNull('Key event target for unrendered control must be null',
          controlRenderer.getKeyEventTarget(control));
      control.createDom();
      assertEquals('Key event target for rendered control must be its element',
          control.getElement(), controlRenderer.getKeyEventTarget(control));
    }

    function testGetCssClass() {
      assertEquals('ControlRenderer\'s CSS class must have expected value',
          goog.ui.ControlRenderer.CSS_CLASS, controlRenderer.getCssClass());
      assertEquals('TestRenderer\'s CSS class must have expected value',
          TestRenderer.CSS_CLASS, testRenderer.getCssClass());
    }

    function testGetStructuralCssClass() {
      assertEquals('ControlRenderer\'s structural class must be its CSS class',
          controlRenderer.getCssClass(),
          controlRenderer.getStructuralCssClass());
      assertEquals('TestRenderer\'s structural class must have expected value',
          'goog-base', testRenderer.getStructuralCssClass());
    }

    function testGetClassNames() {
      // These tests use assertArrayEquals, because the order is significant.
      assertArrayEquals('ControlRenderer must return expected class names ' +
          'in the expected order',
          ['goog-control'],
          controlRenderer.getClassNames(control));
      assertArrayEquals('TestRenderer must return expected class names ' +
          'in the expected order',
          ['goog-button', 'goog-base'],
          testRenderer.getClassNames(control));
    }

    function testGetClassNamesForControlWithState() {
      control.setStateInternal(goog.ui.Component.State.HOVER |
          goog.ui.Component.State.ACTIVE);

      // These tests use assertArrayEquals, because the order is significant.
      assertArrayEquals('ControlRenderer must return expected class names ' +
          'in the expected order',
          ['goog-control', 'goog-control-hover', 'goog-control-active'],
          controlRenderer.getClassNames(control));
      assertArrayEquals('TestRenderer must return expected class names ' +
          'in the expected order',
          ['goog-button', 'goog-base', 'goog-base-hover', 'goog-base-active'],
          testRenderer.getClassNames(control));
    }

    function testGetClassNamesForControlWithExtraClassNames() {
      control.addClassName('foo');
      control.addClassName('bar');

      // These tests use assertArrayEquals, because the order is significant.
      assertArrayEquals('ControlRenderer must return expected class names ' +
          'in the expected order',
          ['goog-control', 'foo', 'bar'],
          controlRenderer.getClassNames(control));
      assertArrayEquals('TestRenderer must return expected class names ' +
          'in the expected order',
          ['goog-button', 'goog-base', 'foo', 'bar'],
          testRenderer.getClassNames(control));
    }

    function testGetClassNamesForControlWithStateAndExtraClassNames() {
      control.setStateInternal(goog.ui.Component.State.HOVER |
          goog.ui.Component.State.ACTIVE);
      control.addClassName('foo');
      control.addClassName('bar');

      // These tests use assertArrayEquals, because the order is significant.
      assertArrayEquals('ControlRenderer must return expected class names ' +
          'in the expected order', [
            'goog-control',
            'goog-control-hover',
            'goog-control-active',
            'foo',
            'bar'
          ], controlRenderer.getClassNames(control));
      assertArrayEquals('TestRenderer must return expected class names ' +
          'in the expected order', [
            'goog-button',
            'goog-base',
            'goog-base-hover',
            'goog-base-active',
            'foo',
            'bar'
          ], testRenderer.getClassNames(control));
    }

    function testGetClassNamesForState() {
      // These tests use assertArrayEquals, because the order is significant.
      assertArrayEquals('ControlRenderer must return expected class names ' +
          'in the expected order',
          ['goog-control-hover', 'goog-control-checked'],
          controlRenderer.getClassNamesForState(goog.ui.Component.State.HOVER |
              goog.ui.Component.State.CHECKED));
      assertArrayEquals('TestRenderer must return expected class names ' +
          'in the expected order',
          ['goog-base-hover', 'goog-base-checked'],
          testRenderer.getClassNamesForState(goog.ui.Component.State.HOVER |
              goog.ui.Component.State.CHECKED));
    }

    function testGetClassForState() {
      var renderer = new goog.ui.ControlRenderer();
      assertUndefined('State-to-class map must not exist until first use',
          renderer.classByState_);
      assertEquals('Renderer must return expected class name for SELECTED',
          'goog-control-selected',
          renderer.getClassForState(goog.ui.Component.State.SELECTED));
      assertUndefined('Renderer must return undefined for invalid state',
          renderer.getClassForState('foo'));
    }

    function testGetStateFromClass() {
      var renderer = new goog.ui.ControlRenderer();
      assertUndefined('Class-to-state map must not exist until first use',
          renderer.stateByClass_);
      assertEquals('Renderer must return expected state',
          goog.ui.Component.State.SELECTED,
          renderer.getStateFromClass('goog-control-selected'));
      assertEquals('Renderer must return 0x00 for unknown class',
          0x00,
          renderer.getStateFromClass('goog-control-annoyed'));
    }

    function testIe6ClassCombinationsCreateDom() {
      control.setRenderer(testRenderer);

      control.enableClassName('combined', true);

      control.createDom();
      var element = control.getElement();

      testRenderer.setState(control, goog.ui.Component.State.DISABLED, true);
      var expectedClasses = [
        'combined',
        'goog-base',
        'goog-base-disabled',
        'goog-button'
      ];
      if (isIe6()) {
        assertSameElements('IE6 and lower should have one combined class',
            expectedClasses.concat(['combined_goog-base-disabled_goog-button']),
            goog.dom.classes.get(element));
      } else {
        assertSameElements('Non IE6 browsers should not have a combined class',
            expectedClasses, goog.dom.classes.get(element));
      }

      testRenderer.setState(control, goog.ui.Component.State.DISABLED, false);
      testRenderer.setState(control, goog.ui.Component.State.HOVER, true);
      var expectedClasses = [
        'combined',
        'goog-base',
        'goog-base-hover',
        'goog-button'
      ];
      if (isIe6()) {
        assertSameElements('IE6 and lower should have one combined class',
            expectedClasses.concat(['combined_goog-base-hover_goog-button']),
            goog.dom.classes.get(element));
      } else {
        assertSameElements('Non IE6 browsers should not have a combined class',
            expectedClasses, goog.dom.classes.get(element));
      }

      testRenderer.setRightToLeft(element, true);
      testRenderer.enableExtraClassName(control, 'combined2', true);
      var expectedClasses = [
        'combined',
        'combined2',
        'goog-base',
        'goog-base-hover',
        'goog-base-rtl',
        'goog-button'
      ];
      if (isIe6()) {
        assertSameElements('IE6 and lower should have two combined class',
            expectedClasses.concat([
              'combined_goog-base-hover_goog-button',
              'combined_combined2_goog-base-hover_goog-base-rtl_goog-button'
            ]), goog.dom.classes.get(element));
      } else {
        assertSameElements('Non IE6 browsers should not have a combined class',
            expectedClasses, goog.dom.classes.get(element));
      }

    }

    function testIe6ClassCombinationsDecorate() {
      sandbox.innerHTML =
          '<div id="foo" class="combined goog-base-hover"></div>';
      var foo = goog.dom.$('foo');

      var element = testRenderer.decorate(control, foo);

      var expectedClasses = [
        'combined',
        'goog-base',
        'goog-base-hover',
        'goog-button'
      ];
      if (isIe6()) {
        assertSameElements('IE6 and lower should have one combined class',
            expectedClasses.concat(['combined_goog-base-hover_goog-button']),
            goog.dom.classes.get(element));
      } else {
        assertSameElements('Non IE6 browsers should not have a combined class',
            expectedClasses, goog.dom.classes.get(element));
      }

    }
  </SCRIPT><DIV style="position: absolute; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(51, 51, 51); border-right-color: rgb(51, 51, 51); border-bottom-color: rgb(51, 51, 51); border-left-color: rgb(51, 51, 51); right: 10px; top: 10px; width: 400px; display: none; " class=" logdiv"><DIV style="position: absolute; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(51, 51, 51); border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(51, 51, 51); right: 0px; top: 0px; width: 1em; height: 1em; cursor: pointer; background-color: rgb(204, 221, 238); text-align: center; color: black; ">X</DIV></DIV>


<DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">Closure Unit Tests - goog.ui.ControlRenderer [PASSED]</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">closure-library.googlecode.com/svn/trunk/closure/goog/ui/controlrenderer_test.html</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">46 of 46 tests run in 88ms.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">46 passed, 0 failed.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">2 ms/test. 53 files loaded.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.856  Start</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.861  testCanDecorate : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.862  testConstructor : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.866  testCreateDom : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.872  testDecorate : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.873  testDecorateComplexDom : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.876  testDecorateOptimization : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.879  testDecorateWithClasses : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.883  testEnableExtraClassName : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.884  testGetAriaRole : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.885  testGetClassForState : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.889  testGetClassNames : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.890  testGetClassNamesForControlWithExtraClassNames : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.891  testGetClassNamesForControlWithState : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.893  testGetClassNamesForControlWithStateAndExtraClassNames : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.894  testGetClassNamesForState : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.895  testGetContentElement : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.895  testGetCssClass : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.896  testGetCustomRenderer : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.897  testGetKeyEventTarget : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.898  testGetStateFromClass : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.899  testGetStructuralCssClass : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.902  testIe6ClassCombinationsCreateDom : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.903  testIe6ClassCombinationsDecorate : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.916  testInitializeDom : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.922  testInitializeDomDecorated : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.925  testInitializeDomDisabledBiDi : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.927  testInitializeDomDisabledBiDiDecorated : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.929  testIsFocusable : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.929  testIsFocusableForControlWithoutKeyEventTarget : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.931  testIsFocusableForNonFocusableControl : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.932  testSetAllowTextSelection : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.932  testSetAriaRole : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.933  testSetContent : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.934  testSetContentArray : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.935  testSetContentElementNode : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.935  testSetContentEmpty : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.936  testSetContentNodeList : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.936  testSetContentNull : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.937  testSetContentTextNode : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.937  testSetContentWhitespace : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.939  testSetFocusable : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.940  testSetFocusableForNonFocusableControl : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.941  testSetRightToLeft : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.942  testSetState : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.943  testSetVisible : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.943  testUpdateAriaState : PASSED</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">08:20:30.944  Done</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; "> </DIV><A style="display: block; font-size: small; " href="">Run again without reloading</A></DIV></BODY></HTML>