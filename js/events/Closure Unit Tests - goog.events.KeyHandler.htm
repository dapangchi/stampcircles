<!DOCTYPE html>
<!-- saved from url=(0088)http://closure-library.googlecode.com/svn/trunk/closure/goog/events/keyhandler_test.html -->
<HTML><!--
  Copyright 2008 Google Inc. All Rights Reserved.
--><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Closure Unit Tests - goog.events.KeyHandler</TITLE>
<SCRIPT src="./Closure Unit Tests - goog.events.KeyHandler_files/base.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/deps.js"></SCRIPT>
<SCRIPT>
  goog.require('goog.events.KeyEvent');
  goog.require('goog.testing.jsunit');
</SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/array.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/errorhandlerweakdep.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/disposable.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/event.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/string.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/useragent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/browserevent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/eventwrapper.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/listener.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/simplepool.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/jscript.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/pools.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/object.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/events.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/eventtarget.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/keycodes.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/keyhandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/stacktrace.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/asserts.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/testcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/testrunner.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.KeyHandler_files/jsunit.js"></SCRIPT>
</HEAD><BODY>
<SCRIPT>

  /**
   * Tests the key handler for the IE behavior.
   */
  function testIeStyleKeyHandling() {
    goog.userAgent.OPERA = false;
    goog.userAgent.IE = true;
    goog.userAgent.GECKO = false;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = false;
    goog.userAgent.MAC = false;
    goog.userAgent.WINDOWS = true;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = true;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, goog.events.KeyCodes.ENTER);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ENTER);
    assertEquals('Enter should fire a key event with the keycode 13',
                 goog.events.KeyCodes.ENTER,
                 keyEvent.keyCode);
    assertEquals('Enter should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.ESC);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ESC);
    assertEquals('Esc should fire a key event with the keycode 27',
                 goog.events.KeyCodes.ESC,
                 keyEvent.keyCode);
    assertEquals('Esc should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.UP);
    assertEquals('Up should fire a key event with the keycode 38',
                 goog.events.KeyCodes.UP,
                 keyEvent.keyCode);
    assertEquals('Up should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.SEVEN, undefined, undefined,
        undefined, undefined, true);
    fireKeyPress(keyHandler, 38, undefined, undefined, undefined, undefined,
        true);
    assertEquals('Shift+7 should fire a key event with the keycode 55',
                 goog.events.KeyCodes.SEVEN,
                 keyEvent.keyCode);
    assertEquals('Shift+7 should fire a key event with the charcode 38',
                 38,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 97);
    assertEquals('Lower case a should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Lower case a should fire a key event with the charcode 97',
                 97,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 65);
    assertEquals('Upper case A should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Upper case A should fire a key event with the charcode 65',
                 65,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.DELETE);
    assertEquals('Delete should fire a key event with the keycode 46',
                 goog.events.KeyCodes.DELETE,
                 keyEvent.keyCode);
    assertEquals('Delete should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.PERIOD);
    fireKeyPress(keyHandler, 46);
    assertEquals('Period should fire a key event with the keycode 190',
                 goog.events.KeyCodes.PERIOD,
                 keyEvent.keyCode);
    assertEquals('Period should fire a key event with the charcode 46',
                 46,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.CTRL);
    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    assertEquals('A with control down should fire a key event',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);

    // On IE, when Ctrl+<key> is held down, there is a KEYDOWN, a KEYPRESS, and
    // then a series of KEYDOWN events for each repeat.
    fireKeyDown(keyHandler, goog.events.KeyCodes.B, undefined, undefined, true);
    fireKeyPress(keyHandler, goog.events.KeyCodes.B, undefined, undefined,
        true);
    assertEquals('B with control down should fire a key event',
                 goog.events.KeyCodes.B,
                 keyEvent.keyCode);
    assertTrue('Ctrl should be down.', keyEvent.ctrlKey);
    assertFalse('Should not have repeat=true on the first key press.',
        keyEvent.repeat);
    // Fire one repeated keydown event.
    fireKeyDown(keyHandler, goog.events.KeyCodes.B, undefined, undefined, true);
    assertEquals('A with control down should fire a key event',
                 goog.events.KeyCodes.B,
                 keyEvent.keyCode);
    assertTrue('Should have repeat=true on key repeat.',
        keyEvent.repeat);
    assertTrue('Ctrl should be down.', keyEvent.ctrlKey);
  }


  /**
   * Tests the key handler for the Gecko behavior.
   */
  function testGeckoStyleKeyHandling() {
    goog.userAgent.OPERA = false;
    goog.userAgent.IE = false;
    goog.userAgent.GECKO = true;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = false;
    goog.userAgent.MAC = false;
    goog.userAgent.WINDOWS = true;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = false;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, goog.events.KeyCodes.ENTER);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ENTER);
    assertEquals('Enter should fire a key event with the keycode 13',
                 goog.events.KeyCodes.ENTER,
                 keyEvent.keyCode);
    assertEquals('Enter should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.ESC);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ESC);
    assertEquals('Esc should fire a key event with the keycode 27',
                 goog.events.KeyCodes.ESC,
                 keyEvent.keyCode);
    assertEquals('Esc should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.UP);
    fireKeyPress(keyHandler, goog.events.KeyCodes.UP);
    assertEquals('Up should fire a key event with the keycode 38',
                 goog.events.KeyCodes.UP,
                 keyEvent.keyCode);
    assertEquals('Up should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.SEVEN, undefined, undefined,
        undefined, undefined, true);
    fireKeyPress(keyHandler, undefined, 38, undefined, undefined, undefined,
        true);
    assertEquals('Shift+7 should fire a key event with the keycode 55',
                 goog.events.KeyCodes.SEVEN,
                 keyEvent.keyCode);
    assertEquals('Shift+7 should fire a key event with the charcode 38',
                 38,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, undefined, 97);
    assertEquals('Lower case a should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Lower case a should fire a key event with the charcode 97',
                 97,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, undefined, 65);
    assertEquals('Upper case A should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Upper case A should fire a key event with the charcode 65',
                 65,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.DELETE);
    fireKeyPress(keyHandler, goog.events.KeyCodes.DELETE);
    assertEquals('Delete should fire a key event with the keycode 46',
                 goog.events.KeyCodes.DELETE,
                 keyEvent.keyCode);
    assertEquals('Delete should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.PERIOD);
    fireKeyPress(keyHandler, undefined, 46);
    assertEquals('Period should fire a key event with the keycode 190',
                 goog.events.KeyCodes.PERIOD,
                 keyEvent.keyCode);
    assertEquals('Period should fire a key event with the charcode 46',
                 46,
                 keyEvent.charCode);
  }


  /**
   * Tests the key handler for the Safari 3 behavior.
   */
  function testSafari3StyleKeyHandling() {
    goog.userAgent.OPERA = false;
    goog.userAgent.IE = false;
    goog.userAgent.GECKO = false;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = true;
    goog.userAgent.MAC = true;
    goog.userAgent.WINDOWS = false;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = true;
    goog.userAgent.VERSION = 525.3;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    // Make sure all events are caught while testing
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, goog.events.KeyCodes.ENTER);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ENTER);
    assertEquals('Enter should fire a key event with the keycode 13',
                 goog.events.KeyCodes.ENTER,
                 keyEvent.keyCode);
    assertEquals('Enter should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);
    fireKeyUp(keyHandler, goog.events.KeyCodes.ENTER);

    // Add a listener to ensure that an extra ENTER event is not dispatched
    // by a subsequent keypress.
    var enterCheck = goog.events.listen(keyHandler,
        goog.events.KeyHandler.EventType.KEY,
        function(e) {
          assertNotEquals('Unexpected ENTER keypress dispatched',
            e.keyCode, goog.events.KeyCodes.ENTER)
        });

    fireKeyDown(keyHandler, goog.events.KeyCodes.ESC);
    assertEquals('Esc should fire a key event with the keycode 27',
                 goog.events.KeyCodes.ESC,
                 keyEvent.keyCode);
    assertEquals('Esc should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ESC);
    goog.events.unlistenByKey(enterCheck);

    fireKeyDown(keyHandler, goog.events.KeyCodes.UP);
    assertEquals('Up should fire a key event with the keycode 38',
                 goog.events.KeyCodes.UP,
                 keyEvent.keyCode);
    assertEquals('Up should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.SEVEN, undefined, undefined,
        undefined, undefined, true);
    fireKeyPress(keyHandler, 38, 38, undefined, undefined, undefined, true);
    assertEquals('Shift+7 should fire a key event with the keycode 55',
                 goog.events.KeyCodes.SEVEN,
                 keyEvent.keyCode);
    assertEquals('Shift+7 should fire a key event with the charcode 38',
                 38,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 97, 97);
    assertEquals('Lower case a should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Lower case a should fire a key event with the charcode 97',
                 97,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 65, 65);
    assertEquals('Upper case A should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Upper case A should fire a key event with the charcode 65',
                 65,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.DELETE);
    assertEquals('Delete should fire a key event with the keycode 46',
                 goog.events.KeyCodes.DELETE,
                 keyEvent.keyCode);
    assertEquals('Delete should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.PERIOD);
    fireKeyPress(keyHandler, 46, 46);
    assertEquals('Period should fire a key event with the keycode 190',
                 goog.events.KeyCodes.PERIOD,
                 keyEvent.keyCode);
    assertEquals('Period should fire a key event with the charcode 46',
                 46,
                 keyEvent.charCode);
  }


  /**
   * Tests the key handler for the Opera behavior.
   */
  function testOperaStyleKeyHandling() {
    goog.userAgent.OPERA = true;
    goog.userAgent.IE = false;
    goog.userAgent.GECKO = false;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = false;
    goog.userAgent.MAC = false;
    goog.userAgent.WINDOWS = true;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = false;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, goog.events.KeyCodes.ENTER);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ENTER);
    assertEquals('Enter should fire a key event with the keycode 13',
                 goog.events.KeyCodes.ENTER,
                 keyEvent.keyCode);
    assertEquals('Enter should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.ESC);
    fireKeyPress(keyHandler, goog.events.KeyCodes.ESC);
    assertEquals('Esc should fire a key event with the keycode 27',
                 goog.events.KeyCodes.ESC,
                 keyEvent.keyCode);
    assertEquals('Esc should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.UP);
    fireKeyPress(keyHandler, goog.events.KeyCodes.UP);
    assertEquals('Up should fire a key event with the keycode 38',
                 goog.events.KeyCodes.UP,
                 keyEvent.keyCode);
    assertEquals('Up should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.SEVEN, undefined, undefined,
        undefined, undefined, true);
    fireKeyPress(keyHandler, 38, undefined, undefined, undefined, undefined,
        true);
    assertEquals('Shift+7 should fire a key event with the keycode 55',
                 goog.events.KeyCodes.SEVEN,
                 keyEvent.keyCode);
    assertEquals('Shift+7 should fire a key event with the charcode 38',
                 38,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 97);
    assertEquals('Lower case a should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Lower case a should fire a key event with the charcode 97',
                 97,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.A);
    fireKeyPress(keyHandler, 65);
    assertEquals('Upper case A should fire a key event with the keycode 65',
                 goog.events.KeyCodes.A,
                 keyEvent.keyCode);
    assertEquals('Upper case A should fire a key event with the charcode 65',
                 65,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.DELETE);
    fireKeyPress(keyHandler, goog.events.KeyCodes.DELETE);
    assertEquals('Delete should fire a key event with the keycode 46',
                 goog.events.KeyCodes.DELETE,
                 keyEvent.keyCode);
    assertEquals('Delete should fire a key event with the charcode 0',
                 0,
                 keyEvent.charCode);

    fireKeyDown(keyHandler, goog.events.KeyCodes.PERIOD);
    fireKeyPress(keyHandler, 46);
    assertEquals('Period should fire a key event with the keycode 190',
                 goog.events.KeyCodes.PERIOD,
                 keyEvent.keyCode);
    assertEquals('Period should fire a key event with the charcode 46',
                 46,
                 keyEvent.charCode);
  }

  function testGeckoEqualSign() {
    goog.userAgent.OPERA = false;
    goog.userAgent.IE = false;
    goog.userAgent.GECKO = true;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = false;
    goog.userAgent.MAC = false;
    goog.userAgent.WINDOWS = true;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = false;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, 61, 0);
    fireKeyPress(keyHandler, 0, 61);
    assertEquals('= should fire should fire a key event with the keyCode 187',
                 goog.events.KeyCodes.EQUALS,
                 keyEvent.keyCode);
    assertEquals('= should fire a key event with the charCode 61',
                 61,
                 keyEvent.charCode);
  }

  function testMacGeckoSlash() {
    goog.userAgent.OPERA = false;
    goog.userAgent.IE = false;
    goog.userAgent.GECKO = true;
    goog.userAgent.CAMINO = false;
    goog.userAgent.WEBKIT = false;
    goog.userAgent.MAC = true;
    goog.userAgent.WINDOWS = false;
    goog.userAgent.LINUX = false;
    goog.events.KeyHandler.USES_KEYDOWN_ = false;

    var keyEvent, keyHandler = new goog.events.KeyHandler();
    goog.events.listen(keyHandler, goog.events.KeyHandler.EventType.KEY,
        function(e) { keyEvent = e; });

    fireKeyDown(keyHandler, 0, 63, null, false, false, true);
    fireKeyPress(keyHandler, 0, 63, null, false, false, true);
    assertEquals('= should fire should fire a key event with the keyCode 191',
                 goog.events.KeyCodes.SLASH,
                 keyEvent.keyCode);
    assertEquals('= should fire a key event with the charCode 63',
                 goog.events.KeyCodes.QUESTION_MARK,
                 keyEvent.charCode);
  }

  function fireKeyDown(keyHandler, keyCode, opt_charCode, opt_keyIdentifier,
      opt_ctrlKey, opt_altKey, opt_shiftKey) {
    var fakeEvent = createFakeKeyEvent(
        goog.events.EventType.KEYDOWN, keyCode, opt_charCode, opt_keyIdentifier,
        opt_ctrlKey, opt_altKey, opt_shiftKey);
    keyHandler.handleKeyDown_(fakeEvent);
    return fakeEvent.returnValue_;
  }

  function fireKeyPress(keyHandler, keyCode, opt_charCode, opt_keyIdentifier,
      opt_ctrlKey, opt_altKey, opt_shiftKey) {
    var fakeEvent = createFakeKeyEvent(
        goog.events.EventType.KEYPRESS, keyCode, opt_charCode,
        opt_keyIdentifier, opt_ctrlKey, opt_altKey, opt_shiftKey);
    keyHandler.handleEvent(fakeEvent);
    return fakeEvent.returnValue_;
  }

  function fireKeyUp(keyHandler, keyCode, opt_charCode, opt_keyIdentifier,
      opt_ctrlKey, opt_altKey, opt_shiftKey) {
    var fakeEvent = createFakeKeyEvent(
        goog.events.EventType.KEYUP, keyCode, opt_charCode,
        opt_keyIdentifier, opt_ctrlKey, opt_altKey, opt_shiftKey);
    keyHandler.handleKeyup_(fakeEvent);
    return fakeEvent.returnValue_;
  }

  function createFakeKeyEvent(type, keyCode, opt_charCode, opt_keyIdentifier,
      opt_ctrlKey, opt_altKey, opt_shiftKey) {
    var event = {
      type: type,
      keyCode: keyCode,
      charCode: opt_charCode || undefined,
      keyIdentifier: opt_keyIdentifier || undefined,
      ctrlKey: opt_ctrlKey || false,
      altKey: opt_altKey || false,
      shiftKey: opt_shiftKey || false,
      timeStamp: goog.now()
    };
    return new goog.events.BrowserEvent(event);
  }

</SCRIPT>


<DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">Closure Unit Tests - goog.events.KeyHandler [PASSED]</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">closure-library.googlecode.com/svn/trunk/closure/goog/events/keyhandler_test.html</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">6 of 6 tests run in 41ms.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">6 passed, 0 failed.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">7 ms/test. 24 files loaded.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.160  Start</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.220  testGeckoEqualSign : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.300  testGeckoStyleKeyHandling : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.410  testIeStyleKeyHandling : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.420  testMacGeckoSlash : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.490  testOperaStyleKeyHandling : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.570  testSafari3StyleKeyHandling : PASSED</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:12.570  Done</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; "> </DIV><A style="display: block; font-size: small; " href="">Run again without reloading</A></DIV></BODY></HTML>