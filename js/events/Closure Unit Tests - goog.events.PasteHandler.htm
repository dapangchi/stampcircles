<!DOCTYPE html>
<!-- saved from url=(0090)http://closure-library.googlecode.com/svn/trunk/closure/goog/events/pastehandler_test.html -->
<HTML><!--
  Copyright 2009 Google Inc. All Rights Reserved.

--><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Closure Unit Tests - goog.events.PasteHandler</TITLE>
<SCRIPT src="./Closure Unit Tests - goog.events.PasteHandler_files/base.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/deps.js"></SCRIPT>
<SCRIPT>
  goog.require('goog.events.PasteHandler');
  goog.require('goog.testing.MockClock');
  goog.require('goog.testing.MockUserAgent');
  goog.require('goog.testing.jsunit');
  goog.require('goog.events.EventTarget');
  goog.require('goog.dom');
</SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/array.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/string.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/object.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/structs.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/iter.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/map.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/set.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/debug.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/logrecord.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/logger.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/disposable.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/errorhandlerweakdep.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/event.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/useragent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/browserevent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/eventwrapper.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/listener.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/simplepool.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/jscript.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/pools.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/events.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/eventhandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/eventtarget.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/keycodes.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/pastehandler.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/mockclock.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/mockuseragent.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/stacktrace.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/asserts.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/testcase.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/testrunner.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/jsunit.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/tagname.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/classes.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/coordinate.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/size.js"></SCRIPT><SCRIPT type="text/javascript" src="./Closure Unit Tests - goog.events.PasteHandler_files/dom.js"></SCRIPT>
</HEAD><BODY>

<TEXTAREA id="foo"></TEXTAREA>

<SCRIPT>

function setUp() {
  // TODO: fix {@code goog.testing.MockUserAgent} to do the right thing.
  // the code doesn't seem to be updating the variables with
  // goog.userAgent.init_(), which means it is not allowing me to mock the
  // user agent variables.
  goog.userAgent.GECKO = true;
  goog.userAgent.IE = false;
  goog.userAgent.WEBKIT = false;
  goog.userAgent.VERSION = '1.8';

  textarea = new goog.events.EventTarget();
  textarea.value = '';
  clock = new goog.testing.MockClock(true);
  mockUserAgent = new goog.testing.MockUserAgent();
  handler = new goog.events.PasteHandler(textarea);
  pasted = false;
  goog.events.listen(handler, goog.events.PasteHandler.EventType.PASTE,
      function() {
        pasted = true;
      });
}

function tearDown() {
  textarea.dispose();
  handler.dispose();
  clock.dispose();
  mockUserAgent.dispose();
}

function newBrowserEvent(type) {
  if (goog.isString(type)) {
    return new goog.events.BrowserEvent({type: type});
  } else {
    return new goog.events.BrowserEvent(type);
  }
}

function testDispatchingPasteEventSupportedByAFewBrowsersWork() {
  goog.userAgent.IE = true;
  var handlerThatSupportsPasteEvents =
      new goog.events.PasteHandler(textarea);
  // user clicks on the textarea and give it focus
  goog.events.listen(handlerThatSupportsPasteEvents,
      goog.events.PasteHandler.EventType.PASTE,
      function() {
        pasted = true;
      });
  textarea.dispatchEvent(newBrowserEvent('paste'));
  assertTrue(pasted);
}

function testJustTypingDoesntFirePasteEvent() {
  // user clicks on the textarea and give it focus
  textarea.dispatchEvent(newBrowserEvent(goog.events.EventType.FOCUS));
  assertFalse(pasted);
  // user starts typing
  textarea.dispatchEvent(newBrowserEvent({
    type: goog.events.EventType.KEYDOWN,
    keyCode: goog.events.KeyCodes.A
  }));
  textarea.value = 'a';
  assertFalse(pasted);

  // still typing
  textarea.dispatchEvent({
    type: goog.events.EventType.KEYDOWN,
    keyCode: goog.events.KeyCodes.B
  });
  textarea.value = 'ab';
  assertFalse(pasted);

  // ends typing
  textarea.dispatchEvent({
    type: goog.events.EventType.KEYDOWN,
    keyCode: goog.events.KeyCodes.C
  });
  textarea.value = 'abc';
  assertFalse(pasted);
}

function testStartsOnInitialState() {
  assertTrue(handler.getState() == goog.events.PasteHandler.State.INIT);
  assertFalse(pasted);
}

function testBlurOnInit() {
  textarea.dispatchEvent(goog.events.EventType.BLUR);
  assertTrue(handler.getState() == goog.events.PasteHandler.State.INIT);
  assertFalse(pasted);
}

function testFocusOnInit() {
  textarea.dispatchEvent(goog.events.EventType.FOCUS);
  assertTrue(handler.getState() == goog.events.PasteHandler.State.FOCUSED);
  assertFalse(pasted);
}

function testInputOnFocus() {
  // user clicks on the textarea
  textarea.dispatchEvent(newBrowserEvent(goog.events.EventType.FOCUS));
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  // and right click -> paste a text!
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(handler.getState() == goog.events.PasteHandler.State.FOCUSED);
  // make sure we detected it
  assertTrue(pasted);
}

function testKeyPressOnFocus() {
  // user clicks on the textarea
  textarea.dispatchEvent(newBrowserEvent(goog.events.EventType.FOCUS));

  // starts typing something
  textarea.dispatchEvent(newBrowserEvent({
    type: goog.events.EventType.KEYDOWN,
    keyCode: goog.events.KeyCodes.A
  }));
  assertTrue(handler.getState() == goog.events.PasteHandler.State.TYPING);
  assertFalse(pasted);

  // and then presses ctrl+v
  textarea.dispatchEvent(newBrowserEvent({
    type: goog.events.EventType.KEYDOWN,
    keyCode: goog.events.KeyCodes.V,
    ctrlKey: true
  }));
  assertTrue(handler.getState() == goog.events.PasteHandler.State.TYPING);

  // makes sure we detected it
  assertTrue(pasted);
}

function testMouseOverOnInit() {
  // user has something on the events
  textarea.value = 'pasted string';
  // and right click -> paste it on the textarea, WITHOUT giving focus
  textarea.dispatchEvent(newBrowserEvent(goog.events.EventType.MOUSEOVER));
  assertTrue(handler.getState() == goog.events.PasteHandler.State.INIT);
  // makes sure we detect it
  assertTrue(pasted);

  pasted = false;

  // user normaly mouseovers the textarea, with no text change
  textarea.dispatchEvent(goog.events.EventType.MOUSEOVER);
  assertTrue(handler.getState() == goog.events.PasteHandler.State.INIT);
  // text area value doesnt change
  assertFalse(pasted);
}

function testMouseOverAfterTyping() {
  textarea.dispatchEvent(goog.events.EventType.FOCUS);
  assertFalse(pasted);
  textarea.dispatchEvent(
      {type: goog.events.EventType.KEYDOWN, keyCode: goog.events.KeyCodes.A});
  assertFalse(pasted);
  textarea.value = 'a';
  textarea.dispatchEvent('input');
  assertFalse(pasted);
  assertEquals('a', handler.oldValue_);
  textarea.dispatchEvent(goog.events.EventType.MOUSEOVER);
  assertFalse(pasted);
}

function testTypingAndThenRightClickPaste() {
  textarea.dispatchEvent(goog.events.EventType.FOCUS);

  textarea.dispatchEvent(
      {type: goog.events.EventType.KEYDOWN, keyCode: goog.events.KeyCodes.A});
  assertFalse(pasted);
  textarea.value = 'a';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  textarea.dispatchEvent('input');
  assertFalse(pasted);

  assertEquals('a', handler.oldValue_);

  textarea.value = 'ab';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);
}

function testTypingReallyFastDispatchesTwoInputEventsBeforeTheKeyDownEvent() {
  textarea.dispatchEvent(goog.events.EventType.FOCUS);

  // keydown and input events seems to be fired indepently: even though input
  // should happen after the key event, it doens't if the user types fast
  // enough. FF2 + linux doesn't fire keydown events for every key pressed when
  // you type fast enough. if one of the keydown events gets swallowed, two
  // input events are fired consecutively. notice that there is a similar
  // scenario, that actually does produce a valid paste action.
  // {@see testRightClickRightClickAlsoDispatchesTwoConsecutiveInputEvents}

  textarea.dispatchEvent(
      {type: goog.events.EventType.KEYDOWN, keyCode: goog.events.KeyCodes.A});
  assertFalse(pasted);
  textarea.value = 'a';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER -
      1);
  textarea.dispatchEvent('input');
  assertFalse(pasted);

  // second key down events gets fired on a different order
  textarea.value = 'ab';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER -
      1);
  textarea.dispatchEvent('input');
  assertFalse(pasted);
}

function testRightClickRightClickAlsoDispatchesTwoConsecutiveInputEvents() {
  textarea.dispatchEvent(goog.events.EventType.FOCUS);

  // there is also another case that two consecutive INPUT events are fired,
  // but in a valid paste action: if the user edit -> paste -> edit -> paste,
  // it is a valid paste action.

  textarea.value = 'a';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);

  // second key down events gets fired on a different order
  textarea.value = 'ab';
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);
}

function testMiddleClickWithoutFocusTriggersPasteEvent() {
  // if the textarea is NOT selected, and then we use the middle button,
  // FF2+linux pastes what was last highlighted, causing a paste action.
  textarea.dispatchEvent(goog.events.EventType.FOCUS);
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);
}


function testMacRightClickPasteRequiresToPressCtrlBecauseItDoesntHaveTwoMouseButtons() {
  // Macs don't have two buttons mouse: this means that you need to press
  // ctrl + click to get to the menu, and then you can click paste.
  // The sequences of events fired on Opera are:
  // focus -> keydown (keyCode == 0, not e.ctrlKey) -> input
  goog.userAgent.OPERA = true;
  goog.userAgent.MAC = true;
  var handler = new goog.events.PasteHandler(textarea);
  // user clicks on the textarea and give it focus
  goog.events.listen(handler,
      goog.events.PasteHandler.EventType.PASTE,
      function() {
        pasted = true;
      });
  textarea.dispatchEvent(goog.events.EventType.FOCUS);
  assertFalse(pasted);
  textarea.dispatchEvent({type: goog.events.EventType.KEYDOWN, keyCode: 0});
  assertFalse(pasted);
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);
}

function testOperaOnMacFiresKeyCode17WhenAppleKeyIsPressedButDoesNotFireAnKeyDownOnVLater() {
  // Opera on Macs fires keycode 17 when apple key is pressed, and then it does
  // not fire a keydown event when the V is pressed.
  goog.userAgent.OPERA = true;
  goog.userAgent.MAC = true;
  var handler = new goog.events.PasteHandler(textarea);
  // user clicks on the textarea and give it focus
  goog.events.listen(handler,
      goog.events.PasteHandler.EventType.PASTE,
      function() {
        pasted = true;
      });
  textarea.dispatchEvent(goog.events.EventType.FOCUS);
  assertFalse(pasted);
  // apple key is pressed, generating a keydown event
  textarea.dispatchEvent({type: goog.events.EventType.KEYDOWN, keyCode: 17});
  assertFalse(pasted);
  clock.tick(
      goog.events.PasteHandler.MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER +
      1);
  // and then text is added magically without any extra keydown events.
  textarea.dispatchEvent(newBrowserEvent('input'));
  assertTrue(pasted);
}

function testScriptingDoesntTriggerPasteEvents() {
  var handlerUsedToListenForScriptingChanges =
      new goog.events.PasteHandler(textarea);
  pasted = false;
  // user clicks on the textarea and give it focus
  goog.events.listen(handlerUsedToListenForScriptingChanges,
      goog.events.PasteHandler.EventType.PASTE,
      function() {
        pasted = true;
      });
  goog.dom.$('foo').value = 'dear paste handler,';
  assertFalse(pasted);
  goog.dom.$('foo').value = 'please dont misunderstand script changes';
  assertFalse(pasted);
  goog.dom.$('foo').value = 'with user generated paste events';
  assertFalse(pasted);
  goog.dom.$('foo').value = 'thanks!';
  assertFalse(pasted);
}

</SCRIPT>


<DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">Closure Unit Tests - goog.events.PasteHandler [PASSED]</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; font-weight: bold; ">closure-library.googlecode.com/svn/trunk/closure/goog/events/pastehandler_test.html</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">16 of 16 tests run in 45ms.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">16 passed, 0 failed.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">3 ms/test. 39 files loaded.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">.</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.361  Start</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.367  testBlurOnInit : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.371  testDispatchingPasteEventSupportedByAFewBrowsersWork : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.373  testFocusOnInit : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.376  testInputOnFocus : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.380  testJustTypingDoesntFirePasteEvent : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.383  testKeyPressOnFocus : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.386  testMacRightClickPasteRequiresToPressCtrlBecauseItDoesntHaveTwoMouseButtons : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.388  testMiddleClickWithoutFocusTriggersPasteEvent : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.390  testMouseOverAfterTyping : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.393  testMouseOverOnInit : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.397  testOperaOnMacFiresKeyCode17WhenAppleKeyIsPressedButDoesNotFireAnKeyDownOnVLater : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.400  testRightClickRightClickAlsoDispatchesTwoConsecutiveInputEvents : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.402  testScriptingDoesntTriggerPasteEvents : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.404  testStartsOnInitialState : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.405  testTypingAndThenRightClickPaste : PASSED</DIV><DIV style="color: rgb(0, 100, 0); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.406  testTypingReallyFastDispatchesTwoInputEventsBeforeTheKeyDownEvent : PASSED</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; ">09:53:47.406  Done</DIV><DIV style="color: rgb(51, 51, 51); font: normal normal normal 100%/normal monospace; white-space: pre-wrap; "> </DIV><A style="display: block; font-size: small; " href="">Run again without reloading</A></DIV></BODY></HTML>